# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="android13-5.15-148"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      #- name: Cache toolchain
       # id: cache-toolchain
      #  uses: actions/cache@v4
     #   with:
       #   path: |
      #      kernel-build-tools
       #     mkbootimg
       #   key: toolchain-${{ runner.os }}-v1
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          #sudo apt-get --assume-yes update
          #sudo apt-get --assume-yes upgrade
          #sudo apt-get --assume-yes install dwarves libyaml-dev
          #echo -e "list installed packages:\n $(apt list --installed)"
          #sudo find /usr -regextype sed -regex ".*/.*yaml\.(so|a|h)"
          #sudo find /usr/ -name '*yaml*' 2>/dev/null | grep -v share
          echo
          echo
          echo
          export PATH="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${ANDROID_NDK_LATEST_HOME}/prebuilt/linux-x86_64/bin/:${PATH}"
          clang --version
          #clang -print-target-triple
          #sudo find $GITHUB_WORKSPACE/kernel-build-tools/linux-x86/ -type d
