# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Cache toolchain
        id: cache-toolchain
        uses: actions/cache@v4.2.0
        with:
          path: |
            kernel-build-tools
            mkbootimg
            arm-toolchain
          key: toolchain-${{ runner.os }}-v1

      # Step 2: Download toolchain if cache was not found
      - name: Download toolchain (if cache not found)
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
          arm_toolchain_url="https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz"
          arm_toolchain_filename="$(echo $arm_toolchain_url | rev | cut -d '/' -f 1 | rev)"
          mkdir -p arm-toolchain
          wget -P arm-toolchain $arm_toolchain_url
          tar -xvf arm-toolchain/${arm_toolchain_filename} -C arm-toolchain/
          rm -rf arm-toolchain/$arm_toolchain_filename
          find arm-toolchain/ -type d
          find arm-toolchain/ -type f -executable
      - name: Set environment variables
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV

      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="android13-5.15-148"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      #- name: Cache toolchain
       # id: cache-toolchain
      #  uses: actions/cache@v4
     #   with:
       #   path: |
      #      kernel-build-tools
       #     mkbootimg
       #   key: toolchain-${{ runner.os }}-v1
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          #sudo apt-get --assume-yes update
          #sudo apt-get --assume-yes upgrade
          #sudo apt-get --assume-yes install dwarves libyaml-dev
          #echo -e "list installed packages:\n $(apt list --installed)"
          #sudo find /usr -regextype sed -regex ".*/.*yaml\.(so|a|h)"
          #sudo find /usr/ -name '*yaml*' 2>/dev/null | grep -v share
          echo
          echo
          echo
          #export PATH="${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${ANDROID_NDK_LATEST_HOME}/prebuilt/linux-x86_64/bin/:${PATH}"
          export PATH="${GITHUB_WORKSPACE}/arm-toolchain/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu/bin:${GITHUB_WORKSPACE}/arm-toolchain/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/bin:$PATH"
          aarch64-none-linux-gnu-gcc -print-sysroot
          echo
          echo
          echo
          which gcc
          which as
          #aarch64-none-linux-gnu-gcc -print-search-dirs | sed 's|:|\n\n|g'
          #clang --version
          #clang -print-target-triple
          #sudo find $GITHUB_WORKSPACE/kernel-build-tools/linux-x86/ -type d
